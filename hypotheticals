### Section in progress (June 12th 2015)
### Takes collection of hypothetical genes found in prophage region, blast (or BLAT/lastal) to find recurring genes in multiple prophages.
### Then will create identity matrix of the set of similar genes to be compared with single copy genes of host, to check for deviations (or non-deviations)
### This -might- lend suggestions to which hypothetical genes are more tightly conserved and .: more important to phage viability.

### 1. Find all hypotheticals 
def phage_map(path,name):    #h = hash of gene names
    counter = 0
    switch = 0
    pp_counter = 0
    try:
        a = open(str(path)+'/prophage_tbl.txt', 'rU')
    except:
        print str(path) + ':file not found'
        return

    INT = []
    
    HASH = {}
    for line in a:
        i = line.split('\t')
        combo = (str(i[1]),str(i[0]), str(i[2]))

        if switch == 0: # not in pp
            if i[9].startswith('0'): ## Is not a phage
                pass
            elif i[9].startswith('1'): ## Beginning of phage
                MAP  = []
                switch = 1
                pp_counter +=1
                contig = i[2]
                MAP.append(combo)
        
        elif switch == 1:
            if (i[9].startswith('1') and contig == i[2]): #Same prophage continued.
                pp_counter += 1
                MAP.append(combo)
                contig = i[2]

            elif (i[9].startswith('1') and contig != i[2]):   # contigs changed in pp. .: 2 prophages
                counter += 1
                if int(pp_counter) < 3:
                    MAP = []
                    counter -= 1
                    pp_counter = 1
                    pass
                elif int(pp_counter) >= 350: ### LOOK TO CHANGE AFTER CONSULTING WITH KATE
                    MAP = []
                    counter -= 1
                    pp_counter = 1
                else:
                    HASH[str(name)+'_'+str(counter)] = MAP
                    MAP = []
                    pp_counter = 1
            elif i[9].startswith('0'):
                counter += 1
                switch = 0
                if int(pp_counter) < 3:
                    MAP = []
                    counter -= 1
                    pp_counter = 1
                elif int(pp_counter) >= 350: ### LOOK TO CHANGE AFTER CONSULTING WITH KATE
                    MAP = []
                    counter -= 1
                    pp_counter = 1
                else:
                    HASH[str(name)+'_'+str(counter)] = MAP
                    MAP = []
                    pp_counter = 1
    a.close()

    GENEID = []
    for key in HASH:
        for arr in HASH[key]:
            if 'HYPOTHETICAL' in arr[0].upper():
                GENEID.append(arr[1:])
    return GENEID

def automate():
    a = open('genomes.txt','U')

    for i in a:
        try:
            b = open('hypothetical_gene_list.faa', 'a+')
            i = i.rstrip()
            path = '/home3/katelyn/KBase/prophages/SEED/'+str(i)       
            integrases = phage_map(path,i)       
            for each in integrases:
                SEQ = get_seq(i,each[0])
                b.write('>'+each[0]+'\n'+str(SEQ))
                b.write('\n')
            b.close()
        except:
            pass
    a.close()

def get_seq(_genome_,_ID_):
    import Bio
    from Bio import SeqIO
    handle = open('/home3/katelyn/KBase/prophages/SEED/'+str(_genome_)+'/'+str(_genome_)+'.gbk')
    parse = SeqIO.parse(handle, 'genbank')
    records = list(parse)
    STR =''
    for contig in records:
        try:
            for i in range(0, len(contig.features)):
                try:
                    ID =  contig.features[i].qualifiers['locus_tag'][0]
                    if str(ID) == str(_ID_):
                        STR = contig.features[i].qualifiers['translation'][0]
                except:
                    pass
        except:
            pass
    handle.close()
    return STR






### 2. Once all hypotheticals collected, blast against one another, probably around 70% identity. Then find recurrences using below scripts

def search(values, searchFor):
    for k in values:
        for v in values[k]:
            if searchFor in v:
                return True
    return False

def find_reccuring_hypothetical_genes():
    a = open('blast_test.txt', 'rU')
    H = {}
    for line in a:
        line = line.rstrip()
        i = line.split('\t')
        query = i[0]
        subject = i[1]
        Eval = float(i[2])
        check_ = search(H,query)
        if check_ == False:
            if Eval < 1e-50:
                if query not in H:
                    H[query] = [subject]
                elif query in H:
                    H[query].append(subject)           
        elif check_ == True:
            pass
        
    return H

def find_nth(haystack, needle, n):
    start = haystack.find(needle)
    while start >= 0 and n > 1:
        start = haystack.find(needle, start+len(needle))
        n -= 1
    return start

def get_seq(_genome_,_ID_):
    import Bio
    from Bio import SeqIO
    handle = open('/home3/katelyn/KBase/prophages/SEED/'+str(_genome_)+'/'+str(_genome_)+'.gbk')
    parse = SeqIO.parse(handle, 'genbank')
    records = list(parse)
    STR =''
    for contig in records:
        try:
            for i in range(0, len(contig.features)):
                try:
                    ID =  contig.features[i].qualifiers['locus_tag'][0]
                    if str(ID) == str(_ID_):
                        STR = contig.features[i].qualifiers['translation'][0]
                except:
                    pass
        except:
            pass
    handle.close()
    return STR


HASH = find_reccuring_hypothetical_genes()
a = open('recurring_hypothetical_genes.txt', 'w')
for ID in HASH:
    if len(HASH[ID]) > 10:
        x = find_nth(ID,'.',2)
        GENOME = ID[:x]
        SEQ = get_seq(GENOME, ID)
        a.write('>'+str(ID)+'\n'+str(SEQ)+'\n')

        
